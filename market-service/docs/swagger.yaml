basePath: /v1
definitions:
  entity.StockPosition:
    properties:
      commission:
        type: number
      current_price:
        type: number
      figi:
        type: string
      name:
        type: string
      quantity:
        type: integer
      tariff:
        $ref: '#/definitions/entity.UserTariff'
      ticker:
        type: string
      total_value:
        type: number
      user_id:
        type: string
      volatility:
        type: number
    type: object
  entity.Strategy:
    properties:
      buyPrice:
        type: number
      buyQuantity:
        type: integer
      createdAt:
        type: string
      figi:
        type: string
      id:
        type: integer
      sellPrice:
        type: number
      sellQuantity:
        type: integer
      updatedAt:
        type: string
      userID:
        type: string
    type: object
  entity.UserTariff:
    enum:
    - investor
    - trader
    - premium
    type: string
    x-enum-comments:
      TariffInvestor: 0.3% commission
      TariffPremium: 0% commission
      TariffTrader: 0.04% commission
    x-enum-varnames:
    - TariffInvestor
    - TariffTrader
    - TariffPremium
  request.SaveStrategy:
    properties:
      buy_price:
        type: number
      buy_quantity:
        type: integer
      figi:
        type: string
      sell_price:
        type: number
      sell_quantity:
        type: integer
    required:
    - buy_price
    - buy_quantity
    - figi
    - sell_price
    - sell_quantity
    type: object
  request.SaveUserToken:
    properties:
      tinkoff_token:
        type: string
    required:
    - tinkoff_token
    type: object
  response.Error:
    properties:
      error:
        example: message
        type: string
    type: object
host: localhost:8081
info:
  contact: {}
  description: API for managing trading strategies
  title: Market Service
  version: "1.0"
paths:
  /market/positions:
    get:
      description: Get all stock positions for the authenticated user with current
        prices and commission calculations
      operationId: get-user-positions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.StockPosition'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - ApiKeyAuth: []
      summary: Get user's stock positions
      tags:
      - market
  /strategy/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a strategy by its ID. Only the owner can delete their strategy.
      parameters:
      - description: Strategy ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: Strategy deleted successfully
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/response.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Error'
        "403":
          description: Forbidden - Strategy belongs to another user
          schema:
            $ref: '#/definitions/response.Error'
        "404":
          description: Strategy not found
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - ApiKeyAuth: []
      summary: Delete a strategy
      tags:
      - strategies
  /strategy/add:
    post:
      consumes:
      - application/json
      description: Save user's trading strategy
      operationId: save-strategy
      parameters:
      - description: Strategy details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.SaveStrategy'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - ApiKeyAuth: []
      summary: Save strategy
      tags:
      - strategy
  /strategy/add_token:
    post:
      consumes:
      - application/json
      description: Save user's token
      operationId: save-user-token
      parameters:
      - description: Strategy details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.SaveUserToken'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - ApiKeyAuth: []
      summary: Save user's token
      tags:
      - strategy
  /strategy/get_strategies:
    get:
      description: Get all strategies for the authenticated user
      operationId: get-user-strategies
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Strategy'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - ApiKeyAuth: []
      summary: Get user strategies
      tags:
      - strategy
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
